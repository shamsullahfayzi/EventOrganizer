@page
@model EventOrganizer.Pages.Events.MyEventsModel
@{
    ViewData["Title"] = "My Events";
}

<div class="max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 mx-auto">
    <div class="max-w-2xl mx-auto text-center mb-10">
        <h2 class="text-3xl font-bold md:text-4xl md:leading-tight dark:text-white">My Events</h2>
        <p class="mt-2 text-lg text-gray-600 dark:text-gray-400">Events you've registered for</p>
    </div>

    <div class="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
        @foreach (var registration in Model.Registrations)
        {
            <div class="group flex flex-col h-full bg-white border border-gray-200 shadow-sm rounded-xl dark:bg-slate-900 dark:border-gray-700 dark:shadow-slate-700/[.7]">
                <div class="h-52 flex flex-col justify-center items-center bg-blue-600 rounded-t-xl">
                    <svg class="w-28 h-28 text-white" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
                        <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                        <line x1="16" y1="2" x2="16" y2="6"></line>
                        <line x1="8" y1="2" x2="8" y2="6"></line>
                        <line x1="3" y1="10" x2="21" y2="10"></line>
                    </svg>
                </div>

                <div class="p-4 md:p-6">
                    <span class="block mb-1 text-xs font-semibold uppercase text-blue-600 dark:text-blue-500">
                        @registration.Event.Category.Name
                    </span>
                    <h3 class="text-xl font-semibold text-gray-800 dark:text-gray-300 dark:hover:text-white">
                        @registration.Event.Title
                    </h3>
                    <p class="mt-3 text-gray-500">
                        @registration.Event.Description
                    </p>
                </div>

                <div class="mt-auto flex border-t border-gray-200 divide-x divide-gray-200 dark:border-gray-700 dark:divide-gray-700">
                    <div class="w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-bl-xl bg-white text-gray-800 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-slate-900 dark:border-gray-700 dark:text-white dark:hover:bg-gray-800 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600">
                        @registration.Event.EventDate.ToString("MMM dd, yyyy")
                    </div>
                    @if (registration.Event.EventDate > DateTime.Now)
                    {
                        <button type="button"
                                onclick="generateTicket('@registration.Event.Title', '@registration.Event.EventDate.ToString("MMM dd, yyyy")', '@registration.Event.Location', '@registration.EventId')"
                                class="w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-br-xl bg-white text-blue-600 shadow-sm hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-slate-900 dark:border-gray-700 dark:text-blue-500 dark:hover:bg-gray-800 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600">
                            <svg class="w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                                <polyline points="7 10 12 15 17 10"></polyline>
                                <line x1="12" y1="15" x2="12" y2="3"></line>
                            </svg>
                            Get Ticket
                        </button>
                    }
                    else
                    {
                        <div class="w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-br-xl bg-gray-100 text-gray-500">
                            Event Expired
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

<!-- Ticket Modal -->
<div id="ticketModal" class="hidden fixed inset-0 z-50 overflow-y-auto bg-black bg-opacity-50">
    <div class="flex items-center justify-center min-h-screen px-4">
        <div id="ticketContent" class="relative bg-gradient-to-r from-blue-500 to-purple-600 p-1 rounded-xl shadow-2xl max-w-2xl w-full">
            <div class="bg-white dark:bg-gray-800 rounded-lg p-8">
                <div class="flex justify-between items-start">
                    <div>
                        <h3 id="ticketEventTitle" class="text-2xl font-bold text-gray-800 dark:text-white"></h3>
                        <p id="ticketEventDate" class="mt-2 text-gray-600 dark:text-gray-400"></p>
                        <p id="ticketEventLocation" class="text-gray-600 dark:text-gray-400"></p>
                    </div>
                    <div class="text-right">
                        <div id="ticketQR" class="mb-2"></div>
                        <p id="ticketId" class="text-sm text-gray-500 dark:text-gray-400"></p>
                    </div>
                </div>

                <div class="mt-6 flex justify-between items-center">
                    <button onclick="downloadTicket()" class="py-2 px-4 inline-flex items-center gap-x-2 text-sm font-semibold rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600">
                        <svg class="w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                            <polyline points="7 10 12 15 17 10"></polyline>
                            <line x1="12" y1="15" x2="12" y2="3"></line>
                        </svg>
                        Download Ticket
                    </button>
                    <button onclick="closeTicketModal()" class="py-2 px-4 inline-flex items-center gap-x-2 text-sm font-semibold rounded-lg border border-gray-200 bg-white text-gray-800 hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-slate-900 dark:border-gray-700 dark:text-white dark:hover:bg-gray-800 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-gray-600">
                        Close
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/qrcodejs/1.0.0/qrcode.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script>
        function generateTicket(title, date, location, registrationId) {
            document.getElementById('ticketEventTitle').textContent = title;
            document.getElementById('ticketEventDate').textContent = date;
            document.getElementById('ticketEventLocation').textContent = location;
            document.getElementById('ticketId').textContent = `#${registrationId}`;

            // Generate QR Code
            const qrContainer = document.getElementById('ticketQR');
            qrContainer.innerHTML = '';
            new QRCode(qrContainer, {
                text: `${title}-${registrationId}`,
                width: 100,
                height: 100
            });

            document.getElementById('ticketModal').classList.remove('hidden');
        }

        function closeTicketModal() {
            document.getElementById('ticketModal').classList.add('hidden');
        }

        function downloadTicket() {
            const ticketContent = document.getElementById('ticketContent');
            html2canvas(ticketContent).then(canvas => {
                const link = document.createElement('a');
                link.download = 'event-ticket.png';
                link.href = canvas.toDataURL();
                link.click();
            });
        }

        // Close modal when clicking outside
        document.getElementById('ticketModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeTicketModal();
            }
        });

        // Close modal on escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeTicketModal();
            }
        });
    </script>
}